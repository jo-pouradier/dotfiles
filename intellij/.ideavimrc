" Set leader key to Space
let mapleader = " "

" Enable incremental search
set incsearch

" Highlight search results
set hlsearch
map <ESC> :nohlsearch<CR>
set ignorecase

" Use system clipboard for copy-paste
set clipboard+=unnamedplus

" Enable EasyMotion requires IdeaVim-EasyMotion plugin
let g:EasyMotion_do_noremapping = 1

" how definition preview
nnoremap K :action QuickJavaDoc<CR>

" Use Ctrl keys
set <C-f>
" Tab navigation
nnoremap <Tab> :tabnext<CR>
nnoremap <S-Tab> :tabprev<CR>
" Scroll behavior
nnoremap <C-u> 10kzz
nnoremap <C-d> 10jzz
" navigation
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap <C-h> <C-w>h
" moving tabs
nnoremap <C-m> :action MoveEditorToOppositeTabGroup<CR>
" Pairs
set matchpairs+=<:>

 Cursor styles
set guicursor=n:block,i:ver25,v:block
set number
set relativenumber

" Keybindings

" Center search results
nnoremap n nzz
nnoremap N Nzz

" Delete entire line with D
nnoremap D dd

" Insert mode: jk to escape
inoremap jk <Esc>

nnoremap dm :action ToggleBookmark<CR>
noremap <leader>/ :action CommentByLineComment<CR>

nnoremap <leader>v <C-w>v<C-w>h:bd<CR><C-w>l

" Copy utils
vnoremap <leader>y \"*y
vnoremap <leader>p \"*p
vnoremap <leader>d \"_dh


" Normal mode keybindings
noremap <leader>ca :action ShowIntentionActions<CR>

" Mode
nnoremap <leader>mp :action TogglePresentationMode<CR>

nnoremap <leader>mz :action ToggleZenMode<CR>
" Go to
nnoremap gi :action JumpToLastChange<CR>
nnoremap gI :action GotoImplementation<CR>
nnoremap <leader><leader> :action RecentLocations<CR>
nnoremap gt :action GotoTest<CR>
" Search
nnoremap <leader>sf :action GotoFile<CR>
nnoremap <leader>sc :action GotoClass<CR>
nnoremap <leader>ss :action GotoSymbol<CR>
nnoremap <leader>sa :action GotoAction<CR>
nnoremap <leader>sg :action SearchEverywhere<CR>
nnoremap <leader>s. :action RecentFiles<CR>
nnoremap <leader>sd :action ActivateProblemsViewToolWindow<CR>
nnoremap <leader>su :action FindUsages<CR>
nnoremap <leader>sU :action ShowUmlDiagram<CR>
" Show
nnoremap <leader>Su :action ShowUsages<CR>
nnoremap <leader>Si :action QuickImplementations<CR>
nnoremap <leader>Sd :action QuickTypeDefinition<CR>
noremap <leader>SK :action ShowHoverInfo<CR>

nnoremap <leader>F :action ReformatCode<CR>
nnoremap <leader>rn :action RenameElement<CR>
nnoremap <leader>x :bd<CR>
nnoremap <leader>X :action CloseAllEditorsButActive<CR>
nnoremap <leader>oi :action OptimizeImports<CR>
" Git
nnoremap <leader>hp :action VcsShowCurrentChangeMarker<CR>
nnoremap <leader>hn :action VcsShowNextChangeMarker<CR>
nnoremap <leader>hN :action VcsShowPrevChangeMarker<CR>
nnoremap <leader>hr :action Vcs.RollbackChangedLines<CR>
nnoremap <leader>hR :action ChangesView.Revert<CR>
" Runnable
nnoremap <leader>rp :action Run<CR>
nnoremap <leader>rr :action Rerun<CR>
nnoremap <leader>rc :action RunClass<CR>
nnoremap <leader>rf :action RunCurrentFile<CR>
nnoremap <leader>rS :action Stop<CR>D
nnoremap <leader>rd :action Debug<CR>D
nnoremap <leader>rs :action ChooseRunConfiguration<CR>
nnoremap <leader>rt :action TestTreePopupMenu<CR>

"Generate
noremap <leader>gg :action Generate<CR>
noremap <leader>gr :action Refactorings.QuickListPopupAction<CR>
" Diagnostic
nnoremap <leader>de :action ShowErrorDescription<CR>
nnoremap <leader>dn :action GotoNextError<CR>
nnoremap <leader>dp :action GoToPreviousError<CR>
nnoremap <leader>ip :action InspectCode<CR>
nnoremap <leader>dq :action ActivateProblemsViewToolWindow<CR>
" Debug
nnoremap <leader>b :action ToggleLineBreakpoint<CR>
nnoremap <leader>B :action AddConditionalBreakpoint<CR>
nnoremap <leader>do :action StepOver<CR>
nnoremap <leader>di :action StepInto<CR>

" Utils
nnoremap <leader>rv :action IdeaVim.ReloadVimRc.reload<CR>
nnoremap <leader>T :action ActivateTerminalToolWindow<CR>
" inoremap <leader>K :action ParameterInfo<CR>

" Plugins:
Plug 'tpope/vim-commentary'
Plug 'machakann/vim-highlightedyank'
set which-key
set NERDTree
set surround " ys* = add, cs* = change, ds* = delete
noremap <leader>sw :action SurroundWith<CR>
set timeoutlen=10000

" Keybindings Plugins
let g:NERDTreenoremapPreview="<Tab>"
let g:NERDTreenoremapActivateNode = 'l'
let g:NERDTreenoremapJumpParent = 'h'
let g:NERDTreenoremapOpenVSplit = 'V'
let g:NERDTreenoremapOpenSplit = 'S'

nnoremap <leader>e :NERDTreeFind<CR>

